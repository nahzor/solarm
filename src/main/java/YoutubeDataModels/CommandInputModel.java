/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package YoutubeDataModels;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommandInputModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7082392079862213905L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommandInputModel\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"command\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"command type. [set]\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"date string. Format <mmddyyyy>\"},{\"name\":\"time\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"time string. Format <hhhh>\"},{\"name\":\"songKeywords\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Keywords for the song.\"}],\"doc:\":\"Command Schema\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** command type. [set] */
   private java.lang.String command;
  /** date string. Format <mmddyyyy> */
   private java.lang.String date;
  /** time string. Format <hhhh> */
   private java.lang.String time;
  /** Keywords for the song. */
   private java.lang.String songKeywords;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommandInputModel() {}

  /**
   * All-args constructor.
   * @param command command type. [set]
   * @param date date string. Format <mmddyyyy>
   * @param time time string. Format <hhhh>
   * @param songKeywords Keywords for the song.
   */
  public CommandInputModel(java.lang.String command, java.lang.String date, java.lang.String time, java.lang.String songKeywords) {
    this.command = command;
    this.date = date;
    this.time = time;
    this.songKeywords = songKeywords;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return command;
    case 1: return date;
    case 2: return time;
    case 3: return songKeywords;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: command = (java.lang.String)value$; break;
    case 1: date = (java.lang.String)value$; break;
    case 2: time = (java.lang.String)value$; break;
    case 3: songKeywords = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'command' field.
   * @return command type. [set]
   */
  public java.lang.String getCommand() {
    return command;
  }


  /**
   * Gets the value of the 'date' field.
   * @return date string. Format <mmddyyyy>
   */
  public java.lang.String getDate() {
    return date;
  }


  /**
   * Gets the value of the 'time' field.
   * @return time string. Format <hhhh>
   */
  public java.lang.String getTime() {
    return time;
  }


  /**
   * Gets the value of the 'songKeywords' field.
   * @return Keywords for the song.
   */
  public java.lang.String getSongKeywords() {
    return songKeywords;
  }


  /**
   * Creates a new CommandInputModel RecordBuilder.
   * @return A new CommandInputModel RecordBuilder
   */
  public static YoutubeDataModels.CommandInputModel.Builder newBuilder() {
    return new YoutubeDataModels.CommandInputModel.Builder();
  }

  /**
   * Creates a new CommandInputModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommandInputModel RecordBuilder
   */
  public static YoutubeDataModels.CommandInputModel.Builder newBuilder(YoutubeDataModels.CommandInputModel.Builder other) {
    return new YoutubeDataModels.CommandInputModel.Builder(other);
  }

  /**
   * Creates a new CommandInputModel RecordBuilder by copying an existing CommandInputModel instance.
   * @param other The existing instance to copy.
   * @return A new CommandInputModel RecordBuilder
   */
  public static YoutubeDataModels.CommandInputModel.Builder newBuilder(YoutubeDataModels.CommandInputModel other) {
    return new YoutubeDataModels.CommandInputModel.Builder(other);
  }

  /**
   * RecordBuilder for CommandInputModel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommandInputModel>
    implements org.apache.avro.data.RecordBuilder<CommandInputModel> {

    /** command type. [set] */
    private java.lang.String command;
    /** date string. Format <mmddyyyy> */
    private java.lang.String date;
    /** time string. Format <hhhh> */
    private java.lang.String time;
    /** Keywords for the song. */
    private java.lang.String songKeywords;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(YoutubeDataModels.CommandInputModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.command)) {
        this.command = data().deepCopy(fields()[0].schema(), other.command);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.songKeywords)) {
        this.songKeywords = data().deepCopy(fields()[3].schema(), other.songKeywords);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CommandInputModel instance
     * @param other The existing instance to copy.
     */
    private Builder(YoutubeDataModels.CommandInputModel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.command)) {
        this.command = data().deepCopy(fields()[0].schema(), other.command);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.date)) {
        this.date = data().deepCopy(fields()[1].schema(), other.date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.time)) {
        this.time = data().deepCopy(fields()[2].schema(), other.time);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.songKeywords)) {
        this.songKeywords = data().deepCopy(fields()[3].schema(), other.songKeywords);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'command' field.
      * command type. [set]
      * @return The value.
      */
    public java.lang.String getCommand() {
      return command;
    }

    /**
      * Sets the value of the 'command' field.
      * command type. [set]
      * @param value The value of 'command'.
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder setCommand(java.lang.String value) {
      validate(fields()[0], value);
      this.command = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'command' field has been set.
      * command type. [set]
      * @return True if the 'command' field has been set, false otherwise.
      */
    public boolean hasCommand() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'command' field.
      * command type. [set]
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder clearCommand() {
      command = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * date string. Format <mmddyyyy>
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * date string. Format <mmddyyyy>
      * @param value The value of 'date'.
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder setDate(java.lang.String value) {
      validate(fields()[1], value);
      this.date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * date string. Format <mmddyyyy>
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'date' field.
      * date string. Format <mmddyyyy>
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder clearDate() {
      date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * time string. Format <hhhh>
      * @return The value.
      */
    public java.lang.String getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * time string. Format <hhhh>
      * @param value The value of 'time'.
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder setTime(java.lang.String value) {
      validate(fields()[2], value);
      this.time = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * time string. Format <hhhh>
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'time' field.
      * time string. Format <hhhh>
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder clearTime() {
      time = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'songKeywords' field.
      * Keywords for the song.
      * @return The value.
      */
    public java.lang.String getSongKeywords() {
      return songKeywords;
    }

    /**
      * Sets the value of the 'songKeywords' field.
      * Keywords for the song.
      * @param value The value of 'songKeywords'.
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder setSongKeywords(java.lang.String value) {
      validate(fields()[3], value);
      this.songKeywords = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'songKeywords' field has been set.
      * Keywords for the song.
      * @return True if the 'songKeywords' field has been set, false otherwise.
      */
    public boolean hasSongKeywords() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'songKeywords' field.
      * Keywords for the song.
      * @return This builder.
      */
    public YoutubeDataModels.CommandInputModel.Builder clearSongKeywords() {
      songKeywords = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public CommandInputModel build() {
      try {
        CommandInputModel record = new CommandInputModel();
        record.command = fieldSetFlags()[0] ? this.command : (java.lang.String) defaultValue(fields()[0]);
        record.date = fieldSetFlags()[1] ? this.date : (java.lang.String) defaultValue(fields()[1]);
        record.time = fieldSetFlags()[2] ? this.time : (java.lang.String) defaultValue(fields()[2]);
        record.songKeywords = fieldSetFlags()[3] ? this.songKeywords : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
