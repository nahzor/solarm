/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package YoutubeDataModels;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VideoModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1304877157287249420L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VideoModel\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"id of youtube video\"},{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"youtube video title\"}],\"doc:\":\"Video Schema\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** id of youtube video */
   private java.lang.String id;
  /** youtube video title */
   private java.lang.String title;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public VideoModel() {}

  /**
   * All-args constructor.
   * @param id id of youtube video
   * @param title youtube video title
   */
  public VideoModel(java.lang.String id, java.lang.String title) {
    this.id = id;
    this.title = title;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return title;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: title = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return id of youtube video
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Gets the value of the 'title' field.
   * @return youtube video title
   */
  public java.lang.String getTitle() {
    return title;
  }


  /**
   * Creates a new VideoModel RecordBuilder.
   * @return A new VideoModel RecordBuilder
   */
  public static YoutubeDataModels.VideoModel.Builder newBuilder() {
    return new YoutubeDataModels.VideoModel.Builder();
  }

  /**
   * Creates a new VideoModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new VideoModel RecordBuilder
   */
  public static YoutubeDataModels.VideoModel.Builder newBuilder(YoutubeDataModels.VideoModel.Builder other) {
    return new YoutubeDataModels.VideoModel.Builder(other);
  }

  /**
   * Creates a new VideoModel RecordBuilder by copying an existing VideoModel instance.
   * @param other The existing instance to copy.
   * @return A new VideoModel RecordBuilder
   */
  public static YoutubeDataModels.VideoModel.Builder newBuilder(YoutubeDataModels.VideoModel other) {
    return new YoutubeDataModels.VideoModel.Builder(other);
  }

  /**
   * RecordBuilder for VideoModel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VideoModel>
    implements org.apache.avro.data.RecordBuilder<VideoModel> {

    /** id of youtube video */
    private java.lang.String id;
    /** youtube video title */
    private java.lang.String title;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(YoutubeDataModels.VideoModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing VideoModel instance
     * @param other The existing instance to copy.
     */
    private Builder(YoutubeDataModels.VideoModel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.title)) {
        this.title = data().deepCopy(fields()[1].schema(), other.title);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * id of youtube video
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * id of youtube video
      * @param value The value of 'id'.
      * @return This builder.
      */
    public YoutubeDataModels.VideoModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * id of youtube video
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * id of youtube video
      * @return This builder.
      */
    public YoutubeDataModels.VideoModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * youtube video title
      * @return The value.
      */
    public java.lang.String getTitle() {
      return title;
    }

    /**
      * Sets the value of the 'title' field.
      * youtube video title
      * @param value The value of 'title'.
      * @return This builder.
      */
    public YoutubeDataModels.VideoModel.Builder setTitle(java.lang.String value) {
      validate(fields()[1], value);
      this.title = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * youtube video title
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'title' field.
      * youtube video title
      * @return This builder.
      */
    public YoutubeDataModels.VideoModel.Builder clearTitle() {
      title = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public VideoModel build() {
      try {
        VideoModel record = new VideoModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.title = fieldSetFlags()[1] ? this.title : (java.lang.String) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

